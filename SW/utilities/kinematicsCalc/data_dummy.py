from sympy import *

################### Symbols #################### 

th1 = Symbol('th1', rational=True)
l1 = Symbol('l1', rational=True)

th2 = Symbol('th2', rational=True)
l2 = Symbol('l2', rational=True)

th3 = Symbol('th3', rational=True)
l3 = Symbol('l3', rational=True)

nx = Symbol('nx', rational=True)
ox = Symbol('ox', rational=True)
ax = Symbol('ax', rational=True)
px = Symbol('px', rational=True)

ny = Symbol('ny', rational=True)
oy = Symbol('oy', rational=True)
ay = Symbol('ay', rational=True)
py = Symbol('py', rational=True)

nz = Symbol('nz', rational=True)
oz = Symbol('oz', rational=True)
az = Symbol('az', rational=True)
pz = Symbol('pz', rational=True)

################################################ 

class DummyData:
    def __init__(self):
        pass


dummy = DummyData()

###################### Direct kinematics precalc ######################
dummy.direct_k_x_ =  -l2*sin(th1)*sin(th2)*cos(90) + l2*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3)*cos(90) + l3*cos(th1)*cos(th2 + th3)
dummy.direct_k_y_ =  l2*sin(th1)*cos(th2) + l2*sin(th2)*cos(90)*cos(th1) + l3*sin(th1)*cos(th2 + th3) + l3*sin(th2 + th3)*cos(90)*cos(th1)
dummy.direct_k_z_ =  l1 + l2*sin(90)*sin(th2) + l3*sin(90)*sin(th2 + th3)

###################### Inverse kinematics matrix precalc ######################

#(A1)^-1
dummy.t1_ = Matrix([[cos(th1)/(sqrt(2)*sin(90)**2*sin(th1)*cos(th1 + pi/4) + 1), (sin(th1) + sqrt(2)*sin(90)**2*cos(th1 + pi/4))/(sqrt(2)*sin(90)**2*sin(th1 + pi/4)*cos(th1) + cos(90)**2), -sqrt(2)*sin(90)*cos(90)*cos(th1)*cos(th1 + pi/4)/(sqrt(2)*sin(90)**2*sin(th1)*cos(th1 + pi/4) + 1), sqrt(2)*l1*sin(90)*cos(90)*cos(th1)*cos(th1 + pi/4)/(sqrt(2)*sin(90)**2*sin(th1)*cos(th1 + pi/4) + 1)], [-sin(th1)*cos(90)/(sqrt(2)*sin(90)**2*sin(th1 + pi/4)*cos(th1) + cos(90)**2), cos(90)*cos(th1)/(sqrt(2)*sin(90)**2*sin(th1 + pi/4)*cos(th1) + cos(90)**2), sqrt(2)*sin(90)*sin(th1 + pi/4)*cos(th1)/(sqrt(2)*sin(90)**2*sin(th1 + pi/4)*cos(th1) + cos(90)**2), -sqrt(2)*l1*sin(90)*sin(th1 + pi/4)*cos(th1)/(sqrt(2)*sin(90)**2*sin(th1 + pi/4)*cos(th1) + cos(90)**2)], [sin(90)*sin(th1)/(sqrt(2)*sin(90)**2*sin(th1 + pi/4)*cos(th1) + cos(90)**2), -sin(90)*cos(th1)/(sqrt(2)*sin(90)**2*sin(th1 + pi/4)*cos(th1) + cos(90)**2), cos(90)/(sqrt(2)*sin(90)**2*sin(th1 + pi/4)*cos(th1) + cos(90)**2), -l1*cos(90)/(sqrt(2)*sin(90)**2*sin(th1 + pi/4)*cos(th1) + cos(90)**2)], [0, 0, 0, 1]])

#(A1)^-1 * T
dummy.t1_t_ = Matrix([[(ny*(sqrt(2)*sin(90)**2*sin(th1)*cos(th1 + pi/4) + 1)*(sin(th1) + sqrt(2)*sin(90)**2*cos(th1 + pi/4)) + (nx - sqrt(2)*nz*sin(180)*cos(th1 + pi/4)/2)*(sqrt(2)*sin(90)**2*sin(th1 + pi/4)*cos(th1) + cos(90)**2)*cos(th1))/((sqrt(2)*sin(90)**2*sin(th1)*cos(th1 + pi/4) + 1)*(sqrt(2)*sin(90)**2*sin(th1 + pi/4)*cos(th1) + cos(90)**2)), (oy*(sqrt(2)*sin(90)**2*sin(th1)*cos(th1 + pi/4) + 1)*(sin(th1) + sqrt(2)*sin(90)**2*cos(th1 + pi/4)) + (ox - sqrt(2)*oz*sin(180)*cos(th1 + pi/4)/2)*(sqrt(2)*sin(90)**2*sin(th1 + pi/4)*cos(th1) + cos(90)**2)*cos(th1))/((sqrt(2)*sin(90)**2*sin(th1)*cos(th1 + pi/4) + 1)*(sqrt(2)*sin(90)**2*sin(th1 + pi/4)*cos(th1) + cos(90)**2)), (ay*(sqrt(2)*sin(90)**2*sin(th1)*cos(th1 + pi/4) + 1)*(sin(th1) + sqrt(2)*sin(90)**2*cos(th1 + pi/4)) + (ax - sqrt(2)*az*sin(180)*cos(th1 + pi/4)/2)*(sqrt(2)*sin(90)**2*sin(th1 + pi/4)*cos(th1) + cos(90)**2)*cos(th1))/((sqrt(2)*sin(90)**2*sin(th1)*cos(th1 + pi/4) + 1)*(sqrt(2)*sin(90)**2*sin(th1 + pi/4)*cos(th1) + cos(90)**2)), (py*(sqrt(2)*sin(90)**2*sin(th1)*cos(th1 + pi/4) + 1)*(sin(th1) + sqrt(2)*sin(90)**2*cos(th1 + pi/4)) + (sqrt(2)*sin(90)**2*sin(th1 + pi/4)*cos(th1) + cos(90)**2)*(sqrt(2)*l1*sin(180)*cos(th1 + pi/4)/2 + px - sqrt(2)*pz*sin(180)*cos(th1 + pi/4)/2)*cos(th1))/((sqrt(2)*sin(90)**2*sin(th1)*cos(th1 + pi/4) + 1)*(sqrt(2)*sin(90)**2*sin(th1 + pi/4)*cos(th1) + cos(90)**2))], [(-nx*sin(th1)*cos(90) + ny*cos(90)*cos(th1) + sqrt(2)*nz*sin(90)*sin(th1 + pi/4)*cos(th1))/(sqrt(2)*sin(90)**2*sin(th1 + pi/4)*cos(th1) + cos(90)**2), (-ox*sin(th1)*cos(90) + oy*cos(90)*cos(th1) + sqrt(2)*oz*sin(90)*sin(th1 + pi/4)*cos(th1))/(sqrt(2)*sin(90)**2*sin(th1 + pi/4)*cos(th1) + cos(90)**2), (-ax*sin(th1)*cos(90) + ay*cos(90)*cos(th1) + sqrt(2)*az*sin(90)*sin(th1 + pi/4)*cos(th1))/(sqrt(2)*sin(90)**2*sin(th1 + pi/4)*cos(th1) + cos(90)**2), (-sqrt(2)*l1*sin(90)*sin(th1 + pi/4)*cos(th1) - px*sin(th1)*cos(90) + py*cos(90)*cos(th1) + sqrt(2)*pz*sin(90)*sin(th1 + pi/4)*cos(th1))/(sqrt(2)*sin(90)**2*sin(th1 + pi/4)*cos(th1) + cos(90)**2)], [(nx*sin(90)*sin(th1) - ny*sin(90)*cos(th1) + nz*cos(90))/(sqrt(2)*sin(90)**2*sin(th1 + pi/4)*cos(th1) + cos(90)**2), (ox*sin(90)*sin(th1) - oy*sin(90)*cos(th1) + oz*cos(90))/(sqrt(2)*sin(90)**2*sin(th1 + pi/4)*cos(th1) + cos(90)**2), (ax*sin(90)*sin(th1) - ay*sin(90)*cos(th1) + az*cos(90))/(sqrt(2)*sin(90)**2*sin(th1 + pi/4)*cos(th1) + cos(90)**2), (-l1*cos(90) + px*sin(90)*sin(th1) - py*sin(90)*cos(th1) + pz*cos(90))/(sqrt(2)*sin(90)**2*sin(th1 + pi/4)*cos(th1) + cos(90)**2)], [0, 0, 0, 1]])

#A2 * A3
dummy.t2_ = Matrix([[cos(th2 + th3), -sin(th2 + th3), 0, l2*cos(th2) + l3*cos(th2 + th3)], [sin(th2 + th3), cos(th2 + th3), 0, l2*sin(th2) + l3*sin(th2 + th3)], [0, 0, 1, 0], [0, 0, 0, 1]])

#(A2)^-1 * (A1)^-1
dummy.t3_ = Matrix([[(-sin(th1)*sin(th2)*cos(90) + cos(th1)*cos(th2))/(sqrt(2)*sin(90)**2*sin(th1)*cos(th1 + pi/4) + 1), (sin(th1)*cos(th2) + sin(th2)*cos(90)*cos(th1) + sqrt(2)*sin(90)**2*cos(th2)*cos(th1 + pi/4))/(sqrt(2)*sin(90)**2*sin(th1 + pi/4)*cos(th1) + cos(90)**2), sqrt(2)*(sin(th2)*sin(th1 + pi/4) - cos(90)*cos(th2)*cos(th1 + pi/4))*sin(90)*cos(th1)/(sqrt(2)*sin(90)**2*sin(th1)*cos(th1 + pi/4) + 1), -(sqrt(2)*l1*sin(90)*sin(th1)*sin(th1 + pi/4)*cos(90)*cos(th2) + sqrt(2)*l1*sin(90)*sin(th2)*sin(th1 + pi/4)*cos(th1) - l1*sin(90)*cos(90)*cos(th2) + sqrt(2)*l2*sin(90)**2*sin(th1 + pi/4)*cos(th1) + l2*cos(90)**2)/(sqrt(2)*sin(90)**2*sin(th1 + pi/4)*cos(th1) + cos(90)**2)], [-(sin(th1)*cos(90)*cos(th2) + sin(th2)*cos(th1))/(sqrt(2)*sin(90)**2*sin(th1)*cos(th1 + pi/4) + 1), (-(sin(th1) + sqrt(2)*sin(90)**2*cos(th1 + pi/4))*sin(th2) + cos(90)*cos(th1)*cos(th2))/(sqrt(2)*sin(90)**2*sin(th1 + pi/4)*cos(th1) + cos(90)**2), sqrt(2)*(sin(th2)*cos(90)*cos(th1 + pi/4) + sin(th1 + pi/4)*cos(th2))*sin(90)*cos(th1)/(sqrt(2)*sin(90)**2*sin(th1)*cos(th1 + pi/4) + 1), -sqrt(2)*l1*(sin(th2)*cos(90)*cos(th1 + pi/4) + sin(th1 + pi/4)*cos(th2))*sin(90)*cos(th1)/(sqrt(2)*sin(90)**2*sin(th1)*cos(th1 + pi/4) + 1)], [sin(90)*sin(th1)/(sqrt(2)*sin(90)**2*sin(th1 + pi/4)*cos(th1) + cos(90)**2), -sin(90)*cos(th1)/(sqrt(2)*sin(90)**2*sin(th1 + pi/4)*cos(th1) + cos(90)**2), cos(90)/(sqrt(2)*sin(90)**2*sin(th1 + pi/4)*cos(th1) + cos(90)**2), -l1*cos(90)/(sqrt(2)*sin(90)**2*sin(th1 + pi/4)*cos(th1) + cos(90)**2)], [0, 0, 0, 1]])
 
#(A2)^-1 * (A1)^-1 * T
dummy.t3_t_ = Matrix([[(ny*(sqrt(2)*sin(90)**2*sin(th1)*cos(th1 + pi/4) + 1)*(sin(th1)*cos(th2) + sin(th2)*cos(90)*cos(th1) + sqrt(2)*sin(90)**2*cos(th2)*cos(th1 + pi/4)) + (-nx*(sin(th1)*sin(th2)*cos(90) - cos(th1)*cos(th2)) + sqrt(2)*nz*(sin(th2)*sin(th1 + pi/4) - cos(90)*cos(th2)*cos(th1 + pi/4))*sin(90)*cos(th1))*(sqrt(2)*sin(90)**2*sin(th1 + pi/4)*cos(th1) + cos(90)**2))/((sqrt(2)*sin(90)**2*sin(th1)*cos(th1 + pi/4) + 1)*(sqrt(2)*sin(90)**2*sin(th1 + pi/4)*cos(th1) + cos(90)**2)), (oy*(sqrt(2)*sin(90)**2*sin(th1)*cos(th1 + pi/4) + 1)*(sin(th1)*cos(th2) + sin(th2)*cos(90)*cos(th1) + sqrt(2)*sin(90)**2*cos(th2)*cos(th1 + pi/4)) + (-ox*(sin(th1)*sin(th2)*cos(90) - cos(th1)*cos(th2)) + sqrt(2)*oz*(sin(th2)*sin(th1 + pi/4) - cos(90)*cos(th2)*cos(th1 + pi/4))*sin(90)*cos(th1))*(sqrt(2)*sin(90)**2*sin(th1 + pi/4)*cos(th1) + cos(90)**2))/((sqrt(2)*sin(90)**2*sin(th1)*cos(th1 + pi/4) + 1)*(sqrt(2)*sin(90)**2*sin(th1 + pi/4)*cos(th1) + cos(90)**2)), (ay*(sqrt(2)*sin(90)**2*sin(th1)*cos(th1 + pi/4) + 1)*(sin(th1)*cos(th2) + sin(th2)*cos(90)*cos(th1) + sqrt(2)*sin(90)**2*cos(th2)*cos(th1 + pi/4)) + (-ax*(sin(th1)*sin(th2)*cos(90) - cos(th1)*cos(th2)) + sqrt(2)*az*(sin(th2)*sin(th1 + pi/4) - cos(90)*cos(th2)*cos(th1 + pi/4))*sin(90)*cos(th1))*(sqrt(2)*sin(90)**2*sin(th1 + pi/4)*cos(th1) + cos(90)**2))/((sqrt(2)*sin(90)**2*sin(th1)*cos(th1 + pi/4) + 1)*(sqrt(2)*sin(90)**2*sin(th1 + pi/4)*cos(th1) + cos(90)**2)), ((-px*(sin(th1)*sin(th2)*cos(90) - cos(th1)*cos(th2)) + sqrt(2)*pz*(sin(th2)*sin(th1 + pi/4) - cos(90)*cos(th2)*cos(th1 + pi/4))*sin(90)*cos(th1))*(sqrt(2)*sin(90)**2*sin(th1 + pi/4)*cos(th1) + cos(90)**2) + (sqrt(2)*sin(90)**2*sin(th1)*cos(th1 + pi/4) + 1)*(l1*(-sin(th2 - 180) + sin(th2 + 180))/4 - sqrt(2)*l1*sin(90)*sin(th1)*sin(th1 + pi/4)*cos(90)*cos(th2) - sqrt(2)*l1*sin(90)*sin(th2)*sin(th1 + pi/4)*cos(th1) - sqrt(2)*l2*sin(90)**2*sin(th1 + pi/4)*cos(th1) - l2*cos(90)**2 + py*(sin(th1)*cos(th2) + sin(th2)*cos(90)*cos(th1) + sqrt(2)*sin(90)**2*cos(th2)*cos(th1 + pi/4))))/((sqrt(2)*sin(90)**2*sin(th1)*cos(th1 + pi/4) + 1)*(sqrt(2)*sin(90)**2*sin(th1 + pi/4)*cos(th1) + cos(90)**2))], [(-ny*((sin(th1) + sqrt(2)*sin(90)**2*cos(th1 + pi/4))*sin(th2) - cos(90)*cos(th1)*cos(th2))*(sqrt(2)*sin(90)**2*sin(th1)*cos(th1 + pi/4) + 1) + (-nx*(sin(th1)*cos(90)*cos(th2) + sin(th2)*cos(th1)) + sqrt(2)*nz*(sin(th2)*cos(90)*cos(th1 + pi/4) + sin(th1 + pi/4)*cos(th2))*sin(90)*cos(th1))*(sqrt(2)*sin(90)**2*sin(th1 + pi/4)*cos(th1) + cos(90)**2))/((sqrt(2)*sin(90)**2*sin(th1)*cos(th1 + pi/4) + 1)*(sqrt(2)*sin(90)**2*sin(th1 + pi/4)*cos(th1) + cos(90)**2)), (-oy*((sin(th1) + sqrt(2)*sin(90)**2*cos(th1 + pi/4))*sin(th2) - cos(90)*cos(th1)*cos(th2))*(sqrt(2)*sin(90)**2*sin(th1)*cos(th1 + pi/4) + 1) + (-ox*(sin(th1)*cos(90)*cos(th2) + sin(th2)*cos(th1)) + sqrt(2)*oz*(sin(th2)*cos(90)*cos(th1 + pi/4) + sin(th1 + pi/4)*cos(th2))*sin(90)*cos(th1))*(sqrt(2)*sin(90)**2*sin(th1 + pi/4)*cos(th1) + cos(90)**2))/((sqrt(2)*sin(90)**2*sin(th1)*cos(th1 + pi/4) + 1)*(sqrt(2)*sin(90)**2*sin(th1 + pi/4)*cos(th1) + cos(90)**2)), (-ay*((sin(th1) + sqrt(2)*sin(90)**2*cos(th1 + pi/4))*sin(th2) - cos(90)*cos(th1)*cos(th2))*(sqrt(2)*sin(90)**2*sin(th1)*cos(th1 + pi/4) + 1) + (-ax*(sin(th1)*cos(90)*cos(th2) + sin(th2)*cos(th1)) + sqrt(2)*az*(sin(th2)*cos(90)*cos(th1 + pi/4) + sin(th1 + pi/4)*cos(th2))*sin(90)*cos(th1))*(sqrt(2)*sin(90)**2*sin(th1 + pi/4)*cos(th1) + cos(90)**2))/((sqrt(2)*sin(90)**2*sin(th1)*cos(th1 + pi/4) + 1)*(sqrt(2)*sin(90)**2*sin(th1 + pi/4)*cos(th1) + cos(90)**2)), (-py*((sin(th1) + sqrt(2)*sin(90)**2*cos(th1 + pi/4))*sin(th2) - cos(90)*cos(th1)*cos(th2))*(sqrt(2)*sin(90)**2*sin(th1)*cos(th1 + pi/4) + 1) + (sqrt(2)*sin(90)**2*sin(th1 + pi/4)*cos(th1) + cos(90)**2)*(-sqrt(2)*l1*(sin(th2)*cos(90)*cos(th1 + pi/4) + sin(th1 + pi/4)*cos(th2))*sin(90)*cos(th1) - px*(sin(th1)*cos(90)*cos(th2) + sin(th2)*cos(th1)) + sqrt(2)*pz*(sin(th2)*cos(90)*cos(th1 + pi/4) + sin(th1 + pi/4)*cos(th2))*sin(90)*cos(th1)))/((sqrt(2)*sin(90)**2*sin(th1)*cos(th1 + pi/4) + 1)*(sqrt(2)*sin(90)**2*sin(th1 + pi/4)*cos(th1) + cos(90)**2))], [(nx*sin(90)*sin(th1) - ny*sin(90)*cos(th1) + nz*cos(90))/(sqrt(2)*sin(90)**2*sin(th1 + pi/4)*cos(th1) + cos(90)**2), (ox*sin(90)*sin(th1) - oy*sin(90)*cos(th1) + oz*cos(90))/(sqrt(2)*sin(90)**2*sin(th1 + pi/4)*cos(th1) + cos(90)**2), (ax*sin(90)*sin(th1) - ay*sin(90)*cos(th1) + az*cos(90))/(sqrt(2)*sin(90)**2*sin(th1 + pi/4)*cos(th1) + cos(90)**2), (-l1*cos(90) + px*sin(90)*sin(th1) - py*sin(90)*cos(th1) + pz*cos(90))/(sqrt(2)*sin(90)**2*sin(th1 + pi/4)*cos(th1) + cos(90)**2)], [0, 0, 0, 1]])

#A3
dummy.t4_ = Matrix([[cos(th3), -sin(th3), 0, l3*cos(th3)], [sin(th3), cos(th3), 0, l3*sin(th3)], [0, 0, 1, 0], [0, 0, 0, 1]])

#Jacobian
dummy.J_ = Matrix([[-l2*sin(th1)*cos(th2) - l2*sin(th2)*cos(90)*cos(th1) - l3*sin(th1)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(90)*cos(th1), -l2*sin(th1)*cos(90)*cos(th2) - l2*sin(th2)*cos(th1) - l3*sin(th1)*cos(90)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(th1), -l3*(sin(th1)*cos(90)*cos(th2 + th3) + sin(th2 + th3)*cos(th1))], [-l2*sin(th1)*sin(th2)*cos(90) + l2*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3)*cos(90) + l3*cos(th1)*cos(th2 + th3), -l2*sin(th1)*sin(th2) + l2*cos(90)*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3) + l3*cos(90)*cos(th1)*cos(th2 + th3), l3*(-sin(th1)*sin(th2 + th3) + cos(90)*cos(th1)*cos(th2 + th3))], [0, (l2*cos(th2) + l3*cos(th2 + th3))*sin(90), l3*sin(90)*cos(th2 + th3)]])

#Inverse Jacobian
dummy.J_inverse_ = Matrix([[((l2*cos(th2) + l3*cos(th2 + th3))*(-l3*((-l2*sin(th1)*sin(th2) + l2*cos(90)*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3) + l3*cos(90)*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(th2) - l2*sin(th2)*cos(90)*cos(th1) - l3*sin(th1)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(90)*cos(th1)) - (-l2*sin(th1)*sin(th2)*cos(90) + l2*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3)*cos(90) + l3*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(90)*cos(th2) - l2*sin(th2)*cos(th1) - l3*sin(th1)*cos(90)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(th1)))*(sin(th1)*cos(90)*cos(th2 + th3) + sin(th2 + th3)*cos(th1)) - (l3*(-sin(th1)*sin(th2 + th3) + cos(90)*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(th2) - l2*sin(th2)*cos(90)*cos(th1) - l3*sin(th1)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(90)*cos(th1)) + l3*(sin(th1)*cos(90)*cos(th2 + th3) + sin(th2 + th3)*cos(th1))*(-l2*sin(th1)*sin(th2)*cos(90) + l2*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3)*cos(90) + l3*cos(th1)*cos(th2 + th3)))*(-l2*sin(th1)*cos(90)*cos(th2) - l2*sin(th2)*cos(th1) - l3*sin(th1)*cos(90)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(th1)))*(l2*sin(th1)*sin(th2)*cos(90) - l2*cos(th1)*cos(th2) + l3*sin(th1)*sin(th2 + th3)*cos(90) - l3*cos(th1)*cos(th2 + th3))*sin(90) + (l3*((-l2*sin(th1)*sin(th2) + l2*cos(90)*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3) + l3*cos(90)*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(th2) - l2*sin(th2)*cos(90)*cos(th1) - l3*sin(th1)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(90)*cos(th1)) - (-l2*sin(th1)*sin(th2)*cos(90) + l2*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3)*cos(90) + l3*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(90)*cos(th2) - l2*sin(th2)*cos(th1) - l3*sin(th1)*cos(90)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(th1)))*sin(90)*cos(th2 + th3) - (l2*cos(th2) + l3*cos(th2 + th3))*(l3*(-sin(th1)*sin(th2 + th3) + cos(90)*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(th2) - l2*sin(th2)*cos(90)*cos(th1) - l3*sin(th1)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(90)*cos(th1)) + l3*(sin(th1)*cos(90)*cos(th2 + th3) + sin(th2 + th3)*cos(th1))*(-l2*sin(th1)*sin(th2)*cos(90) + l2*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3)*cos(90) + l3*cos(th1)*cos(th2 + th3)))*sin(90))*((-l2*sin(th1)*sin(th2) + l2*cos(90)*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3) + l3*cos(90)*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(th2) - l2*sin(th2)*cos(90)*cos(th1) - l3*sin(th1)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(90)*cos(th1)) - (-l2*sin(th1)*sin(th2)*cos(90) + l2*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3)*cos(90) + l3*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(90)*cos(th2) - l2*sin(th2)*cos(th1) - l3*sin(th1)*cos(90)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(th1)) - (l2*sin(th1)*sin(th2)*cos(90) - l2*cos(th1)*cos(th2) + l3*sin(th1)*sin(th2 + th3)*cos(90) - l3*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(90)*cos(th2) - l2*sin(th2)*cos(th1) - l3*sin(th1)*cos(90)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(th1))))/(((-l2*sin(th1)*sin(th2) + l2*cos(90)*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3) + l3*cos(90)*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(th2) - l2*sin(th2)*cos(90)*cos(th1) - l3*sin(th1)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(90)*cos(th1)) - (-l2*sin(th1)*sin(th2)*cos(90) + l2*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3)*cos(90) + l3*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(90)*cos(th2) - l2*sin(th2)*cos(th1) - l3*sin(th1)*cos(90)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(th1)))*(l3*((-l2*sin(th1)*sin(th2) + l2*cos(90)*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3) + l3*cos(90)*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(th2) - l2*sin(th2)*cos(90)*cos(th1) - l3*sin(th1)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(90)*cos(th1)) - (-l2*sin(th1)*sin(th2)*cos(90) + l2*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3)*cos(90) + l3*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(90)*cos(th2) - l2*sin(th2)*cos(th1) - l3*sin(th1)*cos(90)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(th1)))*sin(90)*cos(th2 + th3) - (l2*cos(th2) + l3*cos(th2 + th3))*(l3*(-sin(th1)*sin(th2 + th3) + cos(90)*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(th2) - l2*sin(th2)*cos(90)*cos(th1) - l3*sin(th1)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(90)*cos(th1)) + l3*(sin(th1)*cos(90)*cos(th2 + th3) + sin(th2 + th3)*cos(th1))*(-l2*sin(th1)*sin(th2)*cos(90) + l2*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3)*cos(90) + l3*cos(th1)*cos(th2 + th3)))*sin(90))*(-l2*sin(th1)*cos(th2) - l2*sin(th2)*cos(90)*cos(th1) - l3*sin(th1)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(90)*cos(th1))), ((l2*cos(th2) + l3*cos(th2 + th3))*(-l3*((-l2*sin(th1)*sin(th2) + l2*cos(90)*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3) + l3*cos(90)*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(th2) - l2*sin(th2)*cos(90)*cos(th1) - l3*sin(th1)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(90)*cos(th1)) - (-l2*sin(th1)*sin(th2)*cos(90) + l2*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3)*cos(90) + l3*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(90)*cos(th2) - l2*sin(th2)*cos(th1) - l3*sin(th1)*cos(90)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(th1)))*(sin(th1)*cos(90)*cos(th2 + th3) + sin(th2 + th3)*cos(th1)) - (l3*(-sin(th1)*sin(th2 + th3) + cos(90)*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(th2) - l2*sin(th2)*cos(90)*cos(th1) - l3*sin(th1)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(90)*cos(th1)) + l3*(sin(th1)*cos(90)*cos(th2 + th3) + sin(th2 + th3)*cos(th1))*(-l2*sin(th1)*sin(th2)*cos(90) + l2*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3)*cos(90) + l3*cos(th1)*cos(th2 + th3)))*(-l2*sin(th1)*cos(90)*cos(th2) - l2*sin(th2)*cos(th1) - l3*sin(th1)*cos(90)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(th1)))*(-l2*sin(th1)*cos(th2) - l2*sin(th2)*cos(90)*cos(th1) - l3*sin(th1)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(90)*cos(th1))*sin(90) - (l3*((-l2*sin(th1)*sin(th2) + l2*cos(90)*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3) + l3*cos(90)*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(th2) - l2*sin(th2)*cos(90)*cos(th1) - l3*sin(th1)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(90)*cos(th1)) - (-l2*sin(th1)*sin(th2)*cos(90) + l2*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3)*cos(90) + l3*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(90)*cos(th2) - l2*sin(th2)*cos(th1) - l3*sin(th1)*cos(90)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(th1)))*sin(90)*cos(th2 + th3) - (l2*cos(th2) + l3*cos(th2 + th3))*(l3*(-sin(th1)*sin(th2 + th3) + cos(90)*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(th2) - l2*sin(th2)*cos(90)*cos(th1) - l3*sin(th1)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(90)*cos(th1)) + l3*(sin(th1)*cos(90)*cos(th2 + th3) + sin(th2 + th3)*cos(th1))*(-l2*sin(th1)*sin(th2)*cos(90) + l2*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3)*cos(90) + l3*cos(th1)*cos(th2 + th3)))*sin(90))*(-l2*sin(th1)*cos(th2) - l2*sin(th2)*cos(90)*cos(th1) - l3*sin(th1)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(90)*cos(th1))*(-l2*sin(th1)*cos(90)*cos(th2) - l2*sin(th2)*cos(th1) - l3*sin(th1)*cos(90)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(th1)))/(((-l2*sin(th1)*sin(th2) + l2*cos(90)*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3) + l3*cos(90)*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(th2) - l2*sin(th2)*cos(90)*cos(th1) - l3*sin(th1)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(90)*cos(th1)) - (-l2*sin(th1)*sin(th2)*cos(90) + l2*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3)*cos(90) + l3*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(90)*cos(th2) - l2*sin(th2)*cos(th1) - l3*sin(th1)*cos(90)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(th1)))*(l3*((-l2*sin(th1)*sin(th2) + l2*cos(90)*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3) + l3*cos(90)*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(th2) - l2*sin(th2)*cos(90)*cos(th1) - l3*sin(th1)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(90)*cos(th1)) - (-l2*sin(th1)*sin(th2)*cos(90) + l2*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3)*cos(90) + l3*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(90)*cos(th2) - l2*sin(th2)*cos(th1) - l3*sin(th1)*cos(90)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(th1)))*sin(90)*cos(th2 + th3) - (l2*cos(th2) + l3*cos(th2 + th3))*(l3*(-sin(th1)*sin(th2 + th3) + cos(90)*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(th2) - l2*sin(th2)*cos(90)*cos(th1) - l3*sin(th1)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(90)*cos(th1)) + l3*(sin(th1)*cos(90)*cos(th2 + th3) + sin(th2 + th3)*cos(th1))*(-l2*sin(th1)*sin(th2)*cos(90) + l2*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3)*cos(90) + l3*cos(th1)*cos(th2 + th3)))*sin(90))*(-l2*sin(th1)*cos(th2) - l2*sin(th2)*cos(90)*cos(th1) - l3*sin(th1)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(90)*cos(th1))), -(-l3*((-l2*sin(th1)*sin(th2) + l2*cos(90)*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3) + l3*cos(90)*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(th2) - l2*sin(th2)*cos(90)*cos(th1) - l3*sin(th1)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(90)*cos(th1)) - (-l2*sin(th1)*sin(th2)*cos(90) + l2*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3)*cos(90) + l3*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(90)*cos(th2) - l2*sin(th2)*cos(th1) - l3*sin(th1)*cos(90)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(th1)))*(sin(th1)*cos(90)*cos(th2 + th3) + sin(th2 + th3)*cos(th1)) - (l3*(-sin(th1)*sin(th2 + th3) + cos(90)*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(th2) - l2*sin(th2)*cos(90)*cos(th1) - l3*sin(th1)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(90)*cos(th1)) + l3*(sin(th1)*cos(90)*cos(th2 + th3) + sin(th2 + th3)*cos(th1))*(-l2*sin(th1)*sin(th2)*cos(90) + l2*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3)*cos(90) + l3*cos(th1)*cos(th2 + th3)))*(-l2*sin(th1)*cos(90)*cos(th2) - l2*sin(th2)*cos(th1) - l3*sin(th1)*cos(90)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(th1)))/((l3*((-l2*sin(th1)*sin(th2) + l2*cos(90)*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3) + l3*cos(90)*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(th2) - l2*sin(th2)*cos(90)*cos(th1) - l3*sin(th1)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(90)*cos(th1)) - (-l2*sin(th1)*sin(th2)*cos(90) + l2*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3)*cos(90) + l3*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(90)*cos(th2) - l2*sin(th2)*cos(th1) - l3*sin(th1)*cos(90)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(th1)))*sin(90)*cos(th2 + th3) - (l2*cos(th2) + l3*cos(th2 + th3))*(l3*(-sin(th1)*sin(th2 + th3) + cos(90)*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(th2) - l2*sin(th2)*cos(90)*cos(th1) - l3*sin(th1)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(90)*cos(th1)) + l3*(sin(th1)*cos(90)*cos(th2 + th3) + sin(th2 + th3)*cos(th1))*(-l2*sin(th1)*sin(th2)*cos(90) + l2*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3)*cos(90) + l3*cos(th1)*cos(th2 + th3)))*sin(90))*(-l2*sin(th1)*cos(th2) - l2*sin(th2)*cos(90)*cos(th1) - l3*sin(th1)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(90)*cos(th1)))], [((l2*cos(th2) + l3*cos(th2 + th3))*(l3*(-sin(th1)*sin(th2 + th3) + cos(90)*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(th2) - l2*sin(th2)*cos(90)*cos(th1) - l3*sin(th1)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(90)*cos(th1)) + l3*(sin(th1)*cos(90)*cos(th2 + th3) + sin(th2 + th3)*cos(th1))*(-l2*sin(th1)*sin(th2)*cos(90) + l2*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3)*cos(90) + l3*cos(th1)*cos(th2 + th3)))*(l2*sin(th1)*sin(th2)*cos(90) - l2*cos(th1)*cos(th2) + l3*sin(th1)*sin(th2 + th3)*cos(90) - l3*cos(th1)*cos(th2 + th3))*sin(90) + (l3*((-l2*sin(th1)*sin(th2) + l2*cos(90)*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3) + l3*cos(90)*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(th2) - l2*sin(th2)*cos(90)*cos(th1) - l3*sin(th1)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(90)*cos(th1)) - (-l2*sin(th1)*sin(th2)*cos(90) + l2*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3)*cos(90) + l3*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(90)*cos(th2) - l2*sin(th2)*cos(th1) - l3*sin(th1)*cos(90)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(th1)))*sin(90)*cos(th2 + th3) - (l2*cos(th2) + l3*cos(th2 + th3))*(l3*(-sin(th1)*sin(th2 + th3) + cos(90)*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(th2) - l2*sin(th2)*cos(90)*cos(th1) - l3*sin(th1)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(90)*cos(th1)) + l3*(sin(th1)*cos(90)*cos(th2 + th3) + sin(th2 + th3)*cos(th1))*(-l2*sin(th1)*sin(th2)*cos(90) + l2*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3)*cos(90) + l3*cos(th1)*cos(th2 + th3)))*sin(90))*(l2*sin(th1)*sin(th2)*cos(90) - l2*cos(th1)*cos(th2) + l3*sin(th1)*sin(th2 + th3)*cos(90) - l3*cos(th1)*cos(th2 + th3)))/(((-l2*sin(th1)*sin(th2) + l2*cos(90)*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3) + l3*cos(90)*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(th2) - l2*sin(th2)*cos(90)*cos(th1) - l3*sin(th1)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(90)*cos(th1)) - (-l2*sin(th1)*sin(th2)*cos(90) + l2*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3)*cos(90) + l3*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(90)*cos(th2) - l2*sin(th2)*cos(th1) - l3*sin(th1)*cos(90)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(th1)))*(l3*((-l2*sin(th1)*sin(th2) + l2*cos(90)*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3) + l3*cos(90)*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(th2) - l2*sin(th2)*cos(90)*cos(th1) - l3*sin(th1)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(90)*cos(th1)) - (-l2*sin(th1)*sin(th2)*cos(90) + l2*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3)*cos(90) + l3*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(90)*cos(th2) - l2*sin(th2)*cos(th1) - l3*sin(th1)*cos(90)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(th1)))*sin(90)*cos(th2 + th3) - (l2*cos(th2) + l3*cos(th2 + th3))*(l3*(-sin(th1)*sin(th2 + th3) + cos(90)*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(th2) - l2*sin(th2)*cos(90)*cos(th1) - l3*sin(th1)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(90)*cos(th1)) + l3*(sin(th1)*cos(90)*cos(th2 + th3) + sin(th2 + th3)*cos(th1))*(-l2*sin(th1)*sin(th2)*cos(90) + l2*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3)*cos(90) + l3*cos(th1)*cos(th2 + th3)))*sin(90))), ((l2*cos(th2) + l3*cos(th2 + th3))*(l3*(-sin(th1)*sin(th2 + th3) + cos(90)*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(th2) - l2*sin(th2)*cos(90)*cos(th1) - l3*sin(th1)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(90)*cos(th1)) + l3*(sin(th1)*cos(90)*cos(th2 + th3) + sin(th2 + th3)*cos(th1))*(-l2*sin(th1)*sin(th2)*cos(90) + l2*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3)*cos(90) + l3*cos(th1)*cos(th2 + th3)))*(-l2*sin(th1)*cos(th2) - l2*sin(th2)*cos(90)*cos(th1) - l3*sin(th1)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(90)*cos(th1))*sin(90) + (l3*((-l2*sin(th1)*sin(th2) + l2*cos(90)*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3) + l3*cos(90)*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(th2) - l2*sin(th2)*cos(90)*cos(th1) - l3*sin(th1)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(90)*cos(th1)) - (-l2*sin(th1)*sin(th2)*cos(90) + l2*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3)*cos(90) + l3*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(90)*cos(th2) - l2*sin(th2)*cos(th1) - l3*sin(th1)*cos(90)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(th1)))*sin(90)*cos(th2 + th3) - (l2*cos(th2) + l3*cos(th2 + th3))*(l3*(-sin(th1)*sin(th2 + th3) + cos(90)*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(th2) - l2*sin(th2)*cos(90)*cos(th1) - l3*sin(th1)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(90)*cos(th1)) + l3*(sin(th1)*cos(90)*cos(th2 + th3) + sin(th2 + th3)*cos(th1))*(-l2*sin(th1)*sin(th2)*cos(90) + l2*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3)*cos(90) + l3*cos(th1)*cos(th2 + th3)))*sin(90))*(-l2*sin(th1)*cos(th2) - l2*sin(th2)*cos(90)*cos(th1) - l3*sin(th1)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(90)*cos(th1)))/(((-l2*sin(th1)*sin(th2) + l2*cos(90)*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3) + l3*cos(90)*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(th2) - l2*sin(th2)*cos(90)*cos(th1) - l3*sin(th1)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(90)*cos(th1)) - (-l2*sin(th1)*sin(th2)*cos(90) + l2*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3)*cos(90) + l3*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(90)*cos(th2) - l2*sin(th2)*cos(th1) - l3*sin(th1)*cos(90)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(th1)))*(l3*((-l2*sin(th1)*sin(th2) + l2*cos(90)*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3) + l3*cos(90)*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(th2) - l2*sin(th2)*cos(90)*cos(th1) - l3*sin(th1)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(90)*cos(th1)) - (-l2*sin(th1)*sin(th2)*cos(90) + l2*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3)*cos(90) + l3*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(90)*cos(th2) - l2*sin(th2)*cos(th1) - l3*sin(th1)*cos(90)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(th1)))*sin(90)*cos(th2 + th3) - (l2*cos(th2) + l3*cos(th2 + th3))*(l3*(-sin(th1)*sin(th2 + th3) + cos(90)*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(th2) - l2*sin(th2)*cos(90)*cos(th1) - l3*sin(th1)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(90)*cos(th1)) + l3*(sin(th1)*cos(90)*cos(th2 + th3) + sin(th2 + th3)*cos(th1))*(-l2*sin(th1)*sin(th2)*cos(90) + l2*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3)*cos(90) + l3*cos(th1)*cos(th2 + th3)))*sin(90))), -(l3*(-sin(th1)*sin(th2 + th3) + cos(90)*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(th2) - l2*sin(th2)*cos(90)*cos(th1) - l3*sin(th1)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(90)*cos(th1)) + l3*(sin(th1)*cos(90)*cos(th2 + th3) + sin(th2 + th3)*cos(th1))*(-l2*sin(th1)*sin(th2)*cos(90) + l2*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3)*cos(90) + l3*cos(th1)*cos(th2 + th3)))/(l3*((-l2*sin(th1)*sin(th2) + l2*cos(90)*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3) + l3*cos(90)*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(th2) - l2*sin(th2)*cos(90)*cos(th1) - l3*sin(th1)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(90)*cos(th1)) - (-l2*sin(th1)*sin(th2)*cos(90) + l2*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3)*cos(90) + l3*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(90)*cos(th2) - l2*sin(th2)*cos(th1) - l3*sin(th1)*cos(90)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(th1)))*sin(90)*cos(th2 + th3) - (l2*cos(th2) + l3*cos(th2 + th3))*(l3*(-sin(th1)*sin(th2 + th3) + cos(90)*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(th2) - l2*sin(th2)*cos(90)*cos(th1) - l3*sin(th1)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(90)*cos(th1)) + l3*(sin(th1)*cos(90)*cos(th2 + th3) + sin(th2 + th3)*cos(th1))*(-l2*sin(th1)*sin(th2)*cos(90) + l2*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3)*cos(90) + l3*cos(th1)*cos(th2 + th3)))*sin(90))], [-(l2*cos(th2) + l3*cos(th2 + th3))*(l2*sin(th1)*sin(th2)*cos(90) - l2*cos(th1)*cos(th2) + l3*sin(th1)*sin(th2 + th3)*cos(90) - l3*cos(th1)*cos(th2 + th3))*sin(90)/(l3*((-l2*sin(th1)*sin(th2) + l2*cos(90)*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3) + l3*cos(90)*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(th2) - l2*sin(th2)*cos(90)*cos(th1) - l3*sin(th1)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(90)*cos(th1)) - (-l2*sin(th1)*sin(th2)*cos(90) + l2*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3)*cos(90) + l3*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(90)*cos(th2) - l2*sin(th2)*cos(th1) - l3*sin(th1)*cos(90)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(th1)))*sin(90)*cos(th2 + th3) - (l2*cos(th2) + l3*cos(th2 + th3))*(l3*(-sin(th1)*sin(th2 + th3) + cos(90)*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(th2) - l2*sin(th2)*cos(90)*cos(th1) - l3*sin(th1)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(90)*cos(th1)) + l3*(sin(th1)*cos(90)*cos(th2 + th3) + sin(th2 + th3)*cos(th1))*(-l2*sin(th1)*sin(th2)*cos(90) + l2*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3)*cos(90) + l3*cos(th1)*cos(th2 + th3)))*sin(90)), -(l2*cos(th2) + l3*cos(th2 + th3))*(-l2*sin(th1)*cos(th2) - l2*sin(th2)*cos(90)*cos(th1) - l3*sin(th1)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(90)*cos(th1))*sin(90)/(l3*((-l2*sin(th1)*sin(th2) + l2*cos(90)*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3) + l3*cos(90)*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(th2) - l2*sin(th2)*cos(90)*cos(th1) - l3*sin(th1)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(90)*cos(th1)) - (-l2*sin(th1)*sin(th2)*cos(90) + l2*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3)*cos(90) + l3*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(90)*cos(th2) - l2*sin(th2)*cos(th1) - l3*sin(th1)*cos(90)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(th1)))*sin(90)*cos(th2 + th3) - (l2*cos(th2) + l3*cos(th2 + th3))*(l3*(-sin(th1)*sin(th2 + th3) + cos(90)*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(th2) - l2*sin(th2)*cos(90)*cos(th1) - l3*sin(th1)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(90)*cos(th1)) + l3*(sin(th1)*cos(90)*cos(th2 + th3) + sin(th2 + th3)*cos(th1))*(-l2*sin(th1)*sin(th2)*cos(90) + l2*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3)*cos(90) + l3*cos(th1)*cos(th2 + th3)))*sin(90)), ((-l2*sin(th1)*sin(th2) + l2*cos(90)*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3) + l3*cos(90)*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(th2) - l2*sin(th2)*cos(90)*cos(th1) - l3*sin(th1)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(90)*cos(th1)) - (-l2*sin(th1)*sin(th2)*cos(90) + l2*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3)*cos(90) + l3*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(90)*cos(th2) - l2*sin(th2)*cos(th1) - l3*sin(th1)*cos(90)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(th1)))/(l3*((-l2*sin(th1)*sin(th2) + l2*cos(90)*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3) + l3*cos(90)*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(th2) - l2*sin(th2)*cos(90)*cos(th1) - l3*sin(th1)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(90)*cos(th1)) - (-l2*sin(th1)*sin(th2)*cos(90) + l2*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3)*cos(90) + l3*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(90)*cos(th2) - l2*sin(th2)*cos(th1) - l3*sin(th1)*cos(90)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(th1)))*sin(90)*cos(th2 + th3) - (l2*cos(th2) + l3*cos(th2 + th3))*(l3*(-sin(th1)*sin(th2 + th3) + cos(90)*cos(th1)*cos(th2 + th3))*(-l2*sin(th1)*cos(th2) - l2*sin(th2)*cos(90)*cos(th1) - l3*sin(th1)*cos(th2 + th3) - l3*sin(th2 + th3)*cos(90)*cos(th1)) + l3*(sin(th1)*cos(90)*cos(th2 + th3) + sin(th2 + th3)*cos(th1))*(-l2*sin(th1)*sin(th2)*cos(90) + l2*cos(th1)*cos(th2) - l3*sin(th1)*sin(th2 + th3)*cos(90) + l3*cos(th1)*cos(th2 + th3)))*sin(90))]])



###################################################
###########    OLD CLASS AND OBJECTS    ###########
###################################################
class InverseKinematics:
    def __init__(self, a1, a2, a3):

        #self.T_ = Matrix ([[nx,ox,ax,px], \
        #                   [ny,oy,ay,py], \
        #                   [nz,oz,az,pz], \
        #                   [0, 0, 0, 1]])

        #self.t1_ = simplify(a1.dhmatrix_**-1) # * self.T_)
        #self.t1_t_ = simplify(self.t1_ * self.T_)
        #self.t2_ = simplify(a2.dhmatrix_ * a3.dhmatrix_)

        #self.t3_ = simplify(a2.dhmatrix_**-1 * a1.dhmatrix_**-1) # * self.T_)
        #self.t3_t_ = simplify(self.t3_ * self.T_)
        #self.t4_ = simplify(a3.dhmatrix_)

        self.inverse_th1_ = solve(dummy.t1_t_[3,2]) #position 4,3 in self.t2_ = 0

    def print_matrix(self):
        # dummy to self to print recalculated info
        print "   ---   (A1)^-1 = ", dummy.t1_
        print "   ---   (A1)^-1 * T = ", dummy.t1_t_
        print "   ---   A2 * A3 = ", dummy.t2_

        print "   ---   (A2)^-1 * (A1)^-1 = ", dummy.t3_
        print "   ---   (A2)^-1 * (A1)^-1 * T = ", dummy.t3_t_
        print "   ---   A3 = ", dummy.t4_

        print "#############################"

    def print_(self):
        print "Inverse kinematiks:"
        print " - Equation: ", dummy.t1_t_[2,3], " = 0"
        print " -- th1 = ", solve(dummy.t1_t_[2,3], set=True)
        print "#############################"
